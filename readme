 путь  данных от ввода до ренедеринга



import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";
import { v4 as uuidv4 } from "uuid";

export const getNotesThunk = createAsyncThunk('note/getNotes',
  async () => {
    const response = await axios.get('http://localhost:3001/notes');
    const data = await response.data;    
    
    return (data);

  });

  // export const getNotesThunk = createAsyncThunk('note/getNotes',
  // async () => {
  //   const response = await fetch('http://localhost:3001/notes');
  //   const data = await response.json();    
  //   return (data);

  // });

  export const delNotesThunk = createAsyncThunk('note/delNotes', async (id) => {
   const response = await fetch(`http://localhost:3001/notes/${id}`, {
      method: 'DELETE'
   });   
    return id
  });

  
  export const addNotesThunk = createAsyncThunk('note/addNotes', async ({ id, title, description, lastModified }) => {
       
    const response = await axios.post('http://localhost:3001/notes/', {
      id: id,
      title: title,
      description: description,
      lastModified: lastModified
    });         

    const data = await response.data 
  
    return data
    
  });

  //   export const addNotesThunk = createAsyncThunk('note/addNotes', async ({ id, title, description, lastModified }) => {
  //   const note = {
  //     id: id,
  //     title: title,
  //     description: description,
  //     lastModified: lastModified
  //   }    
  //   const response = await fetch(`http://localhost:3001/notes/`, {
  //     method: 'POST',
  //     headers: { 'Content-Type': 'application/json' },
  //     body:JSON.stringify(note)
  //   });   
    
  //     const data = await response.json()
  //     console.log(data)
  //   return data
    
  // });

  export const updNotesThunk = createAsyncThunk('note/updNotes', async ({ id, title, description, lastModified }) => {
    const note = {
      id: id,
      title: title,
      description: description,
      lastModified: lastModified
    }
    
    const response = await fetch(`http://localhost:3001/notes/${note.id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body:JSON.stringify(note)
    });   
    
    const data = await response.json()
    return data
  });


const noteSlice = createSlice({
  name: "note",
  initialState: {
    notesList: [],
    value: "",
    currentEditingItem: "",
    filterTitleStatus: true,
    filteDataStatus: true,
    searchedNotesTitle: [],

  },

  extraReducers: (builder) => {
  builder.addCase(getNotesThunk.fulfilled, (state, action) => { 
      state.notesList = action.payload
    });
    builder.addCase(addNotesThunk.fulfilled, (state, action) => {
      state.notesList.push(action.payload)
    });
    builder.addCase(delNotesThunk.fulfilled, (state, action) => {
      state.notesList = state.notesList.filter(
        (note) => note.id !== action.payload
      );
    });
    builder.addCase(updNotesThunk.fulfilled, (state, action) => {
      state.notesList = state.notesList.map((item) =>
        item.id === action.payload.id ? action.payload : item
      );
     });
  },

  reducers: {
    // onAddNote(state, action) {
    //   state.notesList.push(action.payload);
    //   console.log(state, action)
    //   //       state.notesList.push({
    //   //   id: uuidv4(),
    //   //   title: action.payload.title,
    //   //   description: action.payload.description,
    //   //   lastModified: Date.now(),
    //   // });
    // },

    // onDeleteNote(state, action) {
    //   state.notesList = state.notesList.filter(
    //     (note) => note.id !== action.payload
    //   );
    // },

    onCurrentItemInfo(state, action) {
      state.currentEditingItem = action.payload;
    },

    // onReplaceEditNote(state, action) {
    //   state.notesList = state.notesList.map((item) =>
    //     item.id === action.payload.id ? action.payload : item
    //   );
    // },

    searchTitleInfo(state, action) {
      state.searchedNotesTitle = action.payload;
    },

    sortTitle(state) {
      if (state.filterTitleStatus)
        state.notesList = state.notesList.sort((a, b) =>
          a.title > b.title ? 1 : -1
        );
      else
        state.notesList = state.notesList.sort((a, b) =>
          b.title > a.title ? 1 : -1
        );
      state.filterTitleStatus = !state.filterTitleStatus;
    },

    sortDate(state) {
      if (state.filteDataStatus)
        state.notesList = state.notesList.sort((a, b) =>
          a.lastModified > b.lastModified ? 1 : -1
        );
      else
        state.notesList = state.notesList.sort((a, b) =>
          b.lastModified > a.lastModified ? 1 : -1
        );
      state.filteDataStatus = !state.filteDataStatus;
    },
  },
});

export const {
  onCurrentItemInfo,
  sortTitle,
  sortDate,
  searchTitleInfo,
} = noteSlice.actions;
export default noteSlice.reducer;

